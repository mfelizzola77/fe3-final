{"ast":null,"code":"var _jsxFileName = \"/Users/sebastianruiz/Documents/Juan DigitalHouse/React/ProyectoFinal/src/Components/utils/global.context.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const initialState = {\n  theme: \"\",\n  data: []\n};\nexport const ContextGlobal = /*#__PURE__*/createContext();\nexport const ContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n  const [darkTheme, setDarkTheme] = useState(false);\n\n  const toggleTheme = () => {\n    setDarkTheme(prevTheme => !prevTheme);\n  };\n\n  const themeClass = useMemo(() => darkTheme ? 'dark' : 'light', [darkTheme]);\n  return /*#__PURE__*/_jsxDEV(ContextGlobal.Provider, {\n    value: {\n      darkTheme,\n      toggleTheme\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: themeClass,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"mLkD5wl5lha0B+8cjspZtO9sE2o=\");\n\n_c = ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["createContext","useState","initialState","theme","data","ContextGlobal","ContextProvider","children","darkTheme","setDarkTheme","toggleTheme","prevTheme","themeClass","useMemo"],"sources":["/Users/sebastianruiz/Documents/Juan DigitalHouse/React/ProyectoFinal/src/Components/utils/global.context.jsx"],"sourcesContent":["import { createContext, useState } from 'react';\n\nexport const initialState = {theme: \"\", data: []}\nexport const ContextGlobal = createContext();\n\nexport const ContextProvider = ({ children }) => {\n  \n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n  const [darkTheme, setDarkTheme] = useState(false);\n\n  const toggleTheme = () => {\n    setDarkTheme((prevTheme) => !prevTheme);\n  };\n\n  const themeClass = useMemo(() => (darkTheme ? 'dark' : 'light'), [darkTheme]);\n\n  return (\n    <ContextGlobal.Provider value={{ darkTheme, toggleTheme }}>\n      <div className={themeClass}>{children}</div>\n    </ContextGlobal.Provider>\n  );\n\n};\n"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;;AAEA,OAAO,MAAMC,YAAY,GAAG;EAACC,KAAK,EAAE,EAAR;EAAYC,IAAI,EAAE;AAAlB,CAArB;AACP,OAAO,MAAMC,aAAa,gBAAGL,aAAa,EAAnC;AAEP,OAAO,MAAMM,eAAe,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAE/C;EACA,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,KAAD,CAA1C;;EAEA,MAAMS,WAAW,GAAG,MAAM;IACxBD,YAAY,CAAEE,SAAD,IAAe,CAACA,SAAjB,CAAZ;EACD,CAFD;;EAIA,MAAMC,UAAU,GAAGC,OAAO,CAAC,MAAOL,SAAS,GAAG,MAAH,GAAY,OAA7B,EAAuC,CAACA,SAAD,CAAvC,CAA1B;EAEA,oBACE,QAAC,aAAD,CAAe,QAAf;IAAwB,KAAK,EAAE;MAAEA,SAAF;MAAaE;IAAb,CAA/B;IAAA,uBACE;MAAK,SAAS,EAAEE,UAAhB;MAAA,UAA6BL;IAA7B;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAMD,CAjBM;;GAAMD,e;;KAAAA,e"},"metadata":{},"sourceType":"module"}